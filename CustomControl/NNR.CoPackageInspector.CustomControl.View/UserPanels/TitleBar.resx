<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="_returnButton.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
</value>
  </data>
</root>